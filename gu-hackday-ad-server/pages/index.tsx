import { Badge, Card, Code, Dot, Page, Spacer, Table } from "@geist-ui/core";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { prisma } from "../src/prisma";
import { Campaign, CampaignType, Label, Creative } from "@prisma/client";

type Props = {
  campaigns: Omit<
    Campaign & { type: CampaignType; labels: Label[]; creatives: Creative[] },
    "created_at" | "updated_at"
  >[];
  campaignTypes: CampaignType[];
};

export default function Home({ campaigns, campaignTypes }: Props) {
  return (
    <div className={styles.container}>
      <Head>
        <title>Gu-Ad-Server</title>
        <meta name="description" content="Generated by create next app" />
        <link
          rel="icon"
          href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>ðŸ¤‘</text></svg>"
        />
      </Head>

      <Page>
        <h1>ðŸ¤‘ gu-ad-server</h1>
        <Table
          data={campaigns.map((campaign) => ({
            ...campaign,
            type: campaign.type.name,
            state: (
              <>
                <Dot style={{ marginRight: "15px" }} type="success" />
                {campaign.state}
              </>
            ),
            labels: (
              <>
                {campaign.labels.map((label) => (
                  <>
                    <Badge style={{ backgroundColor: "blue" }}>
                      {label.name}
                    </Badge>{" "}
                    <Spacer h={0.5} />
                  </>
                ))}
              </>
            ),
            creatives: (
              <>
                {campaign.creatives.map((creative) =>
                  creative.url !== "" ? (
                    // eslint-disable-next-line @next/next/no-img-element
                    <img
                      alt="..."
                      key={creative.id}
                      style={{
                        padding: "4px",
                        maxWidth: "150px",
                        height: "auto",
                      }}
                      src={`http://localhost:3000/creatives/${creative.url}`}
                    />
                  ) : (
                    <Code>HTML / CSS</Code>
                  )
                )}
              </>
            ),
          }))}
        >
          <Table.Column prop="state" label="state" />
          <Table.Column prop="id" label="id" />
          <Table.Column prop="name" label="name" />
          <Table.Column prop="type" label="Campaign Group" />
          <Table.Column prop="labels" label="labels" />
          <Table.Column prop="creatives" label="creatives" />
        </Table>
      </Page>
    </div>
  );
}

export async function getServerSideProps(): Promise<{ props: Props }> {
  const campaignTypes = await prisma.campaignType.findMany();
  const campaigns = (
    await prisma.campaign.findMany({
      include: { type: true, labels: true, creatives: true },
    })
  ).map((c) => ({
    // This is a hack to avoid having to serialise the dates
    ...c,
    created_at: null,
    updated_at: null,
  }));
  return {
    props: {
      campaigns,
      campaignTypes,
    },
  };
}
